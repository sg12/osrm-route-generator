const axios = require('axios');
const fs = require('fs');

// üéØ –ö–û–û–†–î–ò–ù–ê–¢–´ –í–û–ö–ó–ê–õ–ê –ù–û–í–û–°–ò–ë–ò–†–°–ö–ê (–¥–æ—Ä–æ–≥–∞ —Ä—è–¥–æ–º —Å –≤–æ–∫–∑–∞–ª–æ–º)
const vokzal = [55.041566, 83.026464]; // [lat, lon]

// üó∫Ô∏è –¢–ï–°–¢–û–í–´–ô –ú–ê–†–®–†–£–¢ - —Ç–æ–ª—å–∫–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ ‚Üí –ë–µ–ª–æ–≤–æ
const routesData = [
  { 
    coords: [vokzal, [54.4128, 86.31216]], // –ë–µ–ª–æ–≤–æ
    name: '–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫ (–í–æ–∫–∑–∞–ª) ‚Üí –ë–µ–ª–æ–≤–æ'
  }
];

const OSRM_URL = 'http://127.0.0.1:5000/route/v1/driving/';
const results = [];

async function generateAll() {
  console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞...`);

  for (let i = 0; i < routesData.length; i++) {
    const [[lat1, lon1], [lat2, lon2]] = routesData[i].coords;
    const waypoints = `${lon1},${lat1};${lon2},${lat2}`;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const url = `${OSRM_URL}${waypoints}?overview=full&geometries=geojson&steps=true`;

    console.log(`\nüìç –ò—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:`);
    console.log(`   –°—Ç–∞—Ä—Ç (–í–æ–∫–∑–∞–ª): ${lat1}, ${lon1}`);
    console.log(`   –§–∏–Ω–∏—à (–ë–µ–ª–æ–≤–æ): ${lat2}, ${lon2}`);
    console.log(`\nüìç URL –∑–∞–ø—Ä–æ—Å–∞: ${url}`);

    try {
      const { data } = await axios.get(url, { timeout: 10000 });
      
      if (data.code !== 'Ok') {
        console.warn(`‚ö†Ô∏è  OSRM error: ${data.code}`);
        continue;
      }

      const route = data.routes[0];
      
      // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
      const startPoint = route.geometry.coordinates[0];
      const endPoint = route.geometry.coordinates[route.geometry.coordinates.length - 1];
      
      console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢:`);
      console.log(`   ‚úì –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: ${(route.distance / 1000).toFixed(1)} –∫–º`);
      console.log(`   ‚úì –í—Ä–µ–º—è: ${Math.round(route.duration / 60)} –º–∏–Ω`);
      
      console.log(`\nüîç –ê–ù–ê–õ–ò–ó –°–ú–ï–©–ï–ù–ò–Ø:`);
      console.log(`   –ó–∞–¥–∞–Ω–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: [${lat1}, ${lon1}]`);
      console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è:    [${startPoint[1].toFixed(6)}, ${startPoint[0].toFixed(6)}]`);
      
      // –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ —Å–º–µ—â–µ–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö (–≥—Ä—É–±–∞—è —Ñ–æ—Ä–º—É–ª–∞)
      const startOffset = Math.sqrt(
        Math.pow((lat1 - startPoint[1]) * 111000, 2) + 
        Math.pow((lon1 - startPoint[0]) * 111000 * Math.cos(lat1 * Math.PI / 180), 2)
      );
      console.log(`   –°–º–µ—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–∞: ~${Math.round(startOffset)} –º–µ—Ç—Ä–æ–≤`);
      
      console.log(`\n   –ó–∞–¥–∞–Ω–Ω–∞—è –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞:  [${lat2}, ${lon2}]`);
      console.log(`   –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–Ω–µ—á–Ω–∞—è:      [${endPoint[1].toFixed(6)}, ${endPoint[0].toFixed(6)}]`);
      
      const endOffset = Math.sqrt(
        Math.pow((lat2 - endPoint[1]) * 111000, 2) + 
        Math.pow((lon2 - endPoint[0]) * 111000 * Math.cos(lat2 * Math.PI / 180), 2)
      );
      console.log(`   –°–º–µ—â–µ–Ω–∏–µ —Ñ–∏–Ω–∏—à–∞: ~${Math.round(endOffset)} –º–µ—Ç—Ä–æ–≤`);

      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç OSRM –æ waypoints
      if (data.waypoints) {
        console.log(`\nüìå OSRM Waypoints:`);
        data.waypoints.forEach((wp, idx) => {
          console.log(`   ${idx === 0 ? '–°—Ç–∞—Ä—Ç' : '–§–∏–Ω–∏—à'}: [${wp.location[1].toFixed(6)}, ${wp.location[0].toFixed(6)}]`);
          console.log(`           –ò–º—è: ${wp.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`);
          console.log(`           –°–º–µ—â–µ–Ω–∏–µ –æ—Ç –∑–∞–ø—Ä–æ—Å–∞: ${wp.distance?.toFixed(1) || 0} –º`);
        });
      }

      results.push({
        routeId: i + 1,
        name: routesData[i].name,
        fullGeometry: route.geometry.coordinates,
        totalDistance: route.distance,
        totalDuration: route.duration,
        analysis: {
          start_offset_meters: Math.round(startOffset),
          end_offset_meters: Math.round(endOffset),
          waypoints_info: data.waypoints
        }
      });

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞:`, error.message);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const outputDir = './output';
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const outputPath = `${outputDir}/test_belovo.json`;
  fs.writeFileSync(outputPath, JSON.stringify(results, null, 2), 'utf8');
  console.log(`\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ ${outputPath}`);
}

// ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
generateAll();